{"version":3,"file":"type-route.cjs.development.js","sources":["../src/typeOf.ts","../src/TypeRouteError.ts","../src/asArray.ts","../src/assert.ts","../src/buildPathDefs.ts","../src/getParamDefsOfType.ts","../src/createLocation.ts","../src/noMatch.ts","../src/stringUtils.ts","../src/getPathMatch.ts","../src/getObjectMatch.ts","../src/getStateMatch.ts","../src/getQueryMatch.ts","../src/createMatcher.ts","../src/preventDefaultLinkClickBehavior.ts","../src/buildRoute.ts","../src/createRouteBuilder.ts","../src/createQueryStringSerializer.ts","../src/getMatchingRoute.ts","../src/convertToRouterLocationFromHistoryLocation.ts","../src/getRouteByHref.ts","../src/createNavigationHandlerManager.ts","../src/attemptScrollToTop.ts","../src/serializeStateParams.ts","../src/createRouter.ts","../src/defineRoute.ts","../src/param.ts","../src/createGroup.ts","../src/react.ts"],"sourcesContent":["export function typeOf(value: any) {\n  if (value === null) {\n    return \"null\";\n  }\n\n  if (Array.isArray(value)) {\n    return \"array\";\n  }\n\n  return typeof value;\n}\n","import { ErrorDef, BuildPathDefErrorContext } from \"./types\";\nimport { typeOf } from \"./typeOf\";\n\nfunction getBuildPathDefRouteNameMessage(routeName: string) {\n  return `This problem occurred when building the route definition for the \"${routeName}\" route.`;\n}\n\nfunction getBuildPathDefErrorMessage(context: BuildPathDefErrorContext) {\n  return [\n    getBuildPathDefRouteNameMessage(context.routeName),\n    `The path was constructed as \\`${context.rawPath}\\``,\n  ];\n}\n\nexport const TypeRouteError = buildErrorCollection({\n  Path_may_not_be_an_empty_string: {\n    errorCode: 1000,\n    getDetails: getBuildPathDefErrorMessage,\n  },\n\n  Path_must_start_with_a_forward_slash: {\n    errorCode: 1001,\n    getDetails: getBuildPathDefErrorMessage,\n  },\n\n  Path_may_not_end_with_a_forward_slash: {\n    errorCode: 1002,\n    getDetails: getBuildPathDefErrorMessage,\n  },\n\n  Path_may_not_include_characters_that_must_be_URL_encoded: {\n    errorCode: 1003,\n    getDetails: (\n      context: BuildPathDefErrorContext,\n      segment: {\n        leading: string;\n        paramId?: string;\n        trailing?: string;\n      }\n    ) => {\n      const leading = segment.leading;\n      const trailing = segment.trailing ?? \"\";\n      const paramId = segment.paramId ?? \"\";\n\n      const invalidCharacters = (leading + trailing)\n        .split(\"\")\n        .filter((character) => character !== encodeURIComponent(character));\n\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `The path segment \\`${\n          leading + paramId + trailing\n        }\\` has the following invalid characters: ${invalidCharacters.join(\n          \", \"\n        )}`,\n      ];\n    },\n  },\n\n  Path_may_not_include_empty_segments: {\n    errorCode: 1004,\n    getDetails: (context: BuildPathDefErrorContext) => {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        \"Empty segments can be spotted by finding the place in the path with two consecutive forward slashes '//'.\",\n      ];\n    },\n  },\n\n  Path_may_have_at_most_one_parameter_per_segment: {\n    errorCode: 1005,\n    getDetails: (\n      context: BuildPathDefErrorContext,\n      parameterNames: string[]\n    ) => {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `A single segment of the path included the following parameters: ${parameterNames}`,\n        \"Consider using ofType with a customer ValueSerializer for this scenario.\",\n      ];\n    },\n  },\n\n  Path_parameters_may_not_be_used_more_than_once_when_building_a_path: {\n    errorCode: 1005,\n    getDetails: (context: BuildPathDefErrorContext, parameterName: string) => {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `The parameter \"${parameterName}\" was used more than once.`,\n      ];\n    },\n  },\n\n  Optional_path_parameters_may_not_have_any_text_around_the_parameter: {\n    errorCode: 1006,\n    getDetails: (\n      context: BuildPathDefErrorContext,\n      parameterName: string,\n      leadingText: string,\n      trailingText: string\n    ) => {\n      const messages = getBuildPathDefErrorMessage(context);\n\n      if (leadingText) {\n        messages.push(\n          `The parameter \"${parameterName}\" cannot be preceded by \"${leadingText}\".`\n        );\n      }\n\n      if (trailingText) {\n        messages.push(\n          `The parameter \"${parameterName}\" cannot be followed by \"${trailingText}\".`\n        );\n      }\n\n      return messages;\n    },\n  },\n\n  Path_may_have_at_most_one_optional_or_trailing_parameter: {\n    errorCode: 1007,\n    getDetails(\n      context: BuildPathDefErrorContext,\n      numOptionalTrailingParameterNames: number\n    ) {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `At most one optional/trailing parameter should be given but ${numOptionalTrailingParameterNames} were provided.`,\n      ];\n    },\n  },\n\n  Optional_or_trailing_path_parameters_may_only_appear_in_the_last_path_segment:\n    {\n      errorCode: 1008,\n      getDetails: getBuildPathDefErrorMessage,\n    },\n\n  All_path_parameters_must_be_used_in_path_construction: {\n    errorCode: 1009,\n    getDetails(context: BuildPathDefErrorContext, unusedParameters: string[]) {\n      return [\n        ...getBuildPathDefErrorMessage(context),\n        `The following parameters were not used: ${unusedParameters.join(\n          \", \"\n        )}`,\n      ];\n    },\n  },\n\n  Path_parameter_name_must_not_include_curly_brackets_dollar_signs_or_the_forward_slash_character:\n    {\n      errorCode: 1010,\n      getDetails(routeName: string, paramName: string) {\n        return [\n          getBuildPathDefRouteNameMessage(routeName),\n          `The $ { } or / character was used in this parameter name: ${paramName}`,\n        ];\n      },\n    },\n\n  Extension_route_definition_parameter_names_may_not_be_the_same_as_base_route_definition_parameter_names:\n    {\n      errorCode: 1011,\n      getDetails(duplicateParameterNames: string[]) {\n        return [\n          `The following parameter names were used in both the base route definition and the extension: ${duplicateParameterNames.join(\n            \", \"\n          )}`,\n        ];\n      },\n    },\n\n  Expected_type_does_not_match_actual_type: {\n    errorCode: 1012,\n    getDetails({\n      context,\n      value,\n      valueName,\n      expectedType,\n      actualType,\n    }: {\n      context: string;\n      valueName: string;\n      expectedType: string | string[];\n      actualType: string;\n      value: any;\n    }) {\n      return [\n        `Problem found with your usage of \\`${context}\\``,\n        `\\`${valueName}\\` was expected to be of type \\`${\n          Array.isArray(expectedType) ? expectedType.join(\" | \") : expectedType\n        }\\` but was of type \\`${actualType}\\``,\n        `The actual value provided was: ${\n          typeOf(value) === \"object\"\n            ? \"\\n\" +\n              JSON.stringify(value, null, 2)\n                .split(\"\\n\")\n                .map((line) => `  ${line}`)\n                .join(\"\\n\")\n            : \"`\" + value + \"`\"\n        }`,\n      ];\n    },\n  },\n\n  Expected_number_of_arguments_does_match_actual_number: {\n    errorCode: 1013,\n    getDetails({\n      context,\n      args,\n      min,\n      max,\n    }: {\n      context: string;\n      args: any[];\n      min: number;\n      max: number;\n    }) {\n      return [\n        `Problem found with your usage of \\`${context}\\``,\n        `Expected ${min}${min === max ? \"\" : \" - \" + max} but received ${\n          args.length\n        } argument${args.length === 1 ? \"\" : \"s\"}`,\n      ];\n    },\n  },\n\n  Query_string_array_format_and_custom_query_string_serializer_may_not_both_be_provided:\n    {\n      errorCode: 1014,\n      getDetails() {\n        return [\n          \"You may not provide both options.arrayFormat.queryString and options.queryStringSerializer. These options are not compatible.\",\n        ];\n      },\n    },\n\n  Expected_length_of_array_does_match_actual_length: {\n    errorCode: 1015,\n    getDetails({\n      context,\n      array,\n      min,\n      max,\n    }: {\n      context: string;\n      array: any[];\n      min: number;\n      max: number;\n    }) {\n      return [\n        `Problem found with your usage of \\`${context}\\``,\n        `Expected array to be of length ${min}${\n          min === max ? \"\" : \" - \" + max\n        } but actual length was ${array.length}`,\n      ];\n    },\n  },\n\n  Encountered_unexpected_parameter_when_building_route: {\n    errorCode: 1016,\n    getDetails({\n      routeName,\n      unexpectedParameterName,\n      allowedParameterNames,\n    }: {\n      routeName: string;\n      unexpectedParameterName: string;\n      allowedParameterNames: string[];\n    }) {\n      return [\n        `Problem found with your usage of routes.${routeName}( ... )`,\n        `Unexpected parameter passed to route builder named \"${unexpectedParameterName}\"`,\n        allowedParameterNames.length === 0\n          ? \"The route does not take any parameters\"\n          : `This route takes the following parameters: ${allowedParameterNames\n              .map((name) => `\"${name}\"`)\n              .join(\", \")}`,\n      ];\n    },\n  },\n\n  Missing_required_parameter_when_building_route: {\n    errorCode: 1017,\n    getDetails({\n      routeName,\n      missingParameterName,\n    }: {\n      routeName: string;\n      missingParameterName: string;\n    }) {\n      return [\n        `Problem found with your usage of routes.${routeName}( ... )`,\n        `The parameter \"${missingParameterName}\" is required but was not provided.`,\n      ];\n    },\n  },\n\n  Base_url_must_start_with_a_forward_slash: {\n    errorCode: 1018,\n    getDetails(baseUrl: string) {\n      return [\n        'Base URL must start with a forward slash \"/\"',\n        `The value you provided \"${baseUrl}\" does not start with a forward slash.`,\n      ];\n    },\n  },\n\n  Base_url_must_not_contain_any_characters_that_must_be_url_encoded: {\n    errorCode: 1019,\n    getDetails(baseUrl: string) {\n      const invalidCharacters = baseUrl\n        .replace(/\\//g, \"\")\n        .split(\"\")\n        .filter((character) => character !== encodeURIComponent(character));\n      return [\n        `The following characters are invalid: ${invalidCharacters.join(\n          \", \"\n        )}.`,\n      ];\n    },\n  },\n\n  App_should_be_wrapped_in_a_RouteProvider_component: {\n    errorCode: 1020,\n    getDetails() {\n      return [\n        \"Your application must be wrapped in the `RouteProvider` component returned by `createRouter` in order to use the `useRoute` hook.\",\n      ];\n    },\n  },\n\n  Invalid_React_version: {\n    errorCode: 1021,\n    getDetails(version: string) {\n      return [\n        \"React version must be 16.8 or greater.\",\n        `You have version ${version} installed.`,\n        \"If you cannot upgrade the React version try using `type-route/core`.\",\n      ];\n    },\n  },\n});\n\nfunction buildErrorCollection<\n  TErrorDefCollection extends Record<string, ErrorDef>\n>(definitions: TErrorDefCollection) {\n  const errors: Record<\n    string,\n    {\n      name: string;\n      errorCode: number;\n      create(...args: any[]): Error;\n    }\n  > = {};\n\n  Object.keys(definitions).forEach((key) => {\n    const name = key.replace(/_/g, \" \") + \".\";\n    const { errorCode, getDetails } = definitions[key];\n    const messageTitle = `TR${errorCode} · ${name}`;\n\n    errors[key] = {\n      errorCode,\n      name,\n      create(...args: any[]) {\n        const message = (getDetails?.(...args) ?? [])\n          .map((detail) => `- ${detail}`)\n          .join(\"\\n\");\n\n        const error = new Error(\n          message\n            ? `\\n\\n${messageTitle}\\n\\n${message}\\n`\n            : `\\n\\n${messageTitle}\\n`\n        );\n        error.name = `(hopefully helpful 😄) TypeRouteError`;\n\n        return error;\n      },\n    };\n  });\n\n  return errors as {\n    [TName in keyof TErrorDefCollection]: {\n      create(\n        ...args: Parameters<TErrorDefCollection[TName][\"getDetails\"]>\n      ): Error;\n      name: TName;\n      errorCode: TErrorDefCollection[TName][\"errorCode\"];\n    };\n  };\n}\n","export function asArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n","import { TypeRouteError } from \"./TypeRouteError\";\nimport { typeOf } from \"./typeOf\";\n\nexport function assert(\n  context: string,\n  assertions: ((context: string) => void)[]\n) {\n  assertions.forEach((assert) => assert(context));\n}\n\nassert.arrayLength =\n  (array: any[], min: number, max = min) =>\n  (context: string) => {\n    if (array.length < min || array.length > max) {\n      throw TypeRouteError.Expected_length_of_array_does_match_actual_length.create(\n        {\n          context,\n          array,\n          min,\n          max,\n        }\n      );\n    }\n  };\n\nassert.numArgs =\n  (args: any[], min: number, max = min) =>\n  (context: string) => {\n    if (args.length < min || args.length > max) {\n      throw TypeRouteError.Expected_number_of_arguments_does_match_actual_number.create(\n        {\n          context,\n          args,\n          min,\n          max,\n        }\n      );\n    }\n  };\n\nassert.collectionOfType =\n  (expectedType: string | string[], valueName: string, value: any) =>\n  (context: string) => {\n    if (typeOf(value) === \"object\") {\n      const valuePropertyNames = Object.keys(value);\n\n      for (const propertyName of valuePropertyNames) {\n        assert.type(\n          expectedType,\n          `${valueName}.${propertyName}`,\n          value[propertyName]\n        )(context);\n      }\n\n      return;\n    }\n\n    throw TypeRouteError.Expected_type_does_not_match_actual_type.create({\n      context,\n      actualType: typeOf(value),\n      expectedType: `Record<string, ${\n        Array.isArray(expectedType) ? expectedType.join(\" | \") : expectedType\n      }>`,\n      value,\n      valueName,\n    });\n  };\n\nassert.arrayOfType =\n  (expectedType: string | string[], valueName: string, value: any) =>\n  (context: string) => {\n    if (Array.isArray(value)) {\n      for (let index = 0; index < value.length; index++) {\n        assert.type(\n          expectedType,\n          `${valueName}[${index}]`,\n          value[index]\n        )(context);\n      }\n\n      return;\n    }\n\n    throw TypeRouteError.Expected_type_does_not_match_actual_type.create({\n      context,\n      actualType: typeOf(value),\n      expectedType: `Array<${\n        Array.isArray(expectedType) ? expectedType.join(\" | \") : expectedType\n      }>`,\n      value,\n      valueName,\n    });\n  };\n\nassert.type =\n  (expectedType: string | string[], valueName: string, value: any) =>\n  (context: string) => {\n    const expectedTypeList =\n      typeof expectedType === \"string\" ? [expectedType] : expectedType;\n\n    for (const expectedType of expectedTypeList) {\n      const expectsProperType =\n        expectedType[0].toUpperCase() === expectedType[0];\n\n      if (\n        (expectsProperType &&\n          (typeOf(value) === \"object\" || typeOf(value) === \"function\") &&\n          typeOf(value[\"~internal\"]) === \"object\" &&\n          value[\"~internal\"].type === expectedType) ||\n        (!expectsProperType && typeOf(value) === expectedType)\n      ) {\n        return;\n      }\n    }\n\n    throw TypeRouteError.Expected_type_does_not_match_actual_type.create({\n      context,\n      actualType: typeOf(value),\n      expectedType,\n      value,\n      valueName,\n    });\n  };\n","import { TypeRouteError } from \"./TypeRouteError\";\nimport {\n  PathParamDef,\n  NamedPathParamDef,\n  BuildPathDefErrorContext,\n  GetRawPath,\n  PathDef,\n  ParamIdCollection,\n} from \"./types\";\nimport { asArray } from \"./asArray\";\nimport { assert } from \"./assert\";\n\nexport function buildPathDefs(\n  routeName: string,\n  pathParamDefCollection: Record<string, PathParamDef>,\n  getRawPath: GetRawPath\n): PathDef[] {\n  const namedPathParamDefs = Object.keys(pathParamDefCollection).map(\n    (paramName) => {\n      const namedPathParameterDefinition: NamedPathParamDef = {\n        paramName,\n        ...pathParamDefCollection[paramName],\n      };\n\n      return namedPathParameterDefinition;\n    }\n  );\n\n  const paramIdCollection: ParamIdCollection = {};\n\n  namedPathParamDefs.forEach(({ paramName }) => {\n    if (__DEV__) {\n      if (\n        paramName.indexOf(\"$\") >= 0 ||\n        paramName.indexOf(\"{\") >= 0 ||\n        paramName.indexOf(\"}\") >= 0 ||\n        paramName.indexOf(\"/\") >= 0\n      ) {\n        throw TypeRouteError.Path_parameter_name_must_not_include_curly_brackets_dollar_signs_or_the_forward_slash_character.create(\n          routeName,\n          paramName\n        );\n      }\n    }\n\n    paramIdCollection[paramName] = getParamId(paramName);\n  });\n\n  const rawPath = getRawPath(paramIdCollection);\n\n  if (__DEV__) {\n    if (Array.isArray(rawPath)) {\n      assert(`ReturnType<${routeName}.path>`, [\n        assert.arrayOfType(\"string\", \"path\", rawPath),\n        assert.arrayLength(rawPath, 1, Infinity),\n      ]);\n    } else {\n      assert(`ReturnType<${routeName}.path>`, [\n        assert.type(\"string\", \"path\", rawPath),\n      ]);\n    }\n  }\n\n  return asArray(rawPath).map((rawPath) => {\n    const errorContext: BuildPathDefErrorContext = {\n      rawPath,\n      routeName,\n    };\n\n    if (__DEV__) {\n      if (rawPath.length === 0) {\n        throw TypeRouteError.Path_may_not_be_an_empty_string.create(\n          errorContext\n        );\n      }\n\n      if (rawPath[0] !== \"/\") {\n        throw TypeRouteError.Path_must_start_with_a_forward_slash.create(\n          errorContext\n        );\n      }\n    }\n\n    if (rawPath.length === 1) {\n      return [];\n    }\n\n    if (__DEV__) {\n      if (rawPath.length > 0 && rawPath[rawPath.length - 1] === \"/\") {\n        throw TypeRouteError.Path_may_not_end_with_a_forward_slash.create(\n          errorContext\n        );\n      }\n    }\n\n    const rawPathSegments = rawPath.split(\"/\").slice(1);\n\n    const usedPathParams: Record<string, true> = {};\n    const pathDef: PathDef = [];\n\n    for (const rawSegment of rawPathSegments) {\n      if (__DEV__) {\n        if (rawSegment.length === 0) {\n          throw TypeRouteError.Path_may_not_include_empty_segments.create(\n            errorContext\n          );\n        }\n      }\n\n      let includedParamDef: NamedPathParamDef<unknown> | null = null;\n\n      for (const paramDef of namedPathParamDefs) {\n        if (rawSegment.indexOf(getParamId(paramDef.paramName)) >= 0) {\n          if (__DEV__) {\n            if (includedParamDef !== null) {\n              throw TypeRouteError.Path_may_have_at_most_one_parameter_per_segment.create(\n                errorContext,\n                [paramDef.paramName, includedParamDef.paramName]\n              );\n            }\n\n            if (usedPathParams[paramDef.paramName]) {\n              throw TypeRouteError.Path_parameters_may_not_be_used_more_than_once_when_building_a_path.create(\n                errorContext,\n                paramDef.paramName\n              );\n            }\n          }\n\n          includedParamDef = paramDef;\n          usedPathParams[paramDef.paramName] = true;\n        }\n      }\n\n      if (includedParamDef) {\n        const [leading, trailing] = rawSegment.split(\n          getParamId(includedParamDef.paramName)\n        );\n\n        if (__DEV__) {\n          if (\n            encodeURIComponent(leading) !== leading ||\n            encodeURIComponent(trailing) !== trailing\n          ) {\n            throw TypeRouteError.Path_may_not_include_characters_that_must_be_URL_encoded.create(\n              errorContext,\n              {\n                leading,\n                paramId: getParamId(includedParamDef.paramName),\n                trailing,\n              }\n            );\n          }\n\n          if (\n            includedParamDef[\"~internal\"].optional &&\n            (leading !== \"\" || trailing !== \"\")\n          ) {\n            throw TypeRouteError.Optional_path_parameters_may_not_have_any_text_around_the_parameter.create(\n              errorContext,\n              includedParamDef.paramName,\n              leading,\n              trailing\n            );\n          }\n        }\n\n        pathDef.push({\n          leading,\n          trailing,\n          namedParamDef: includedParamDef,\n        });\n      } else {\n        if (__DEV__) {\n          if (encodeURIComponent(rawSegment) !== rawSegment) {\n            throw TypeRouteError.Path_may_not_include_characters_that_must_be_URL_encoded.create(\n              errorContext,\n              { leading: rawSegment }\n            );\n          }\n        }\n\n        pathDef.push({\n          leading: rawSegment,\n          trailing: \"\",\n          namedParamDef: null,\n        });\n      }\n    }\n\n    const numOptionalOrTrailingParams = pathDef.filter(\n      (part) =>\n        part.namedParamDef?.[\"~internal\"].optional ||\n        part.namedParamDef?.[\"~internal\"].trailing\n    ).length;\n\n    if (__DEV__) {\n      if (numOptionalOrTrailingParams > 1) {\n        throw TypeRouteError.Path_may_have_at_most_one_optional_or_trailing_parameter.create(\n          errorContext,\n          numOptionalOrTrailingParams\n        );\n      }\n    }\n\n    const lastPathSegmentParameterDefinition =\n      pathDef[pathDef.length - 1].namedParamDef;\n\n    if (__DEV__) {\n      if (\n        numOptionalOrTrailingParams === 1 &&\n        !lastPathSegmentParameterDefinition?.[\"~internal\"].optional &&\n        !lastPathSegmentParameterDefinition?.[\"~internal\"].trailing\n      ) {\n        throw TypeRouteError.Optional_or_trailing_path_parameters_may_only_appear_in_the_last_path_segment.create(\n          errorContext\n        );\n      }\n    }\n\n    const unusedPathParameterDefinitions = namedPathParamDefs\n      .map(({ paramName: name }) => name)\n      .filter((name) => !usedPathParams[name]);\n\n    if (__DEV__) {\n      if (unusedPathParameterDefinitions.length > 0) {\n        throw TypeRouteError.All_path_parameters_must_be_used_in_path_construction.create(\n          errorContext,\n          unusedPathParameterDefinitions\n        );\n      }\n    }\n\n    return pathDef;\n  });\n}\n\nfunction getParamId(parameterName: string) {\n  return \"${p.\" + parameterName + \"}\";\n}\n","import { ParamDefKind, ParamDefCollection } from \"./types\";\n\nexport function getParamDefsOfType<TParamType extends ParamDefKind>(\n  type: TParamType,\n  paramDefCollection: ParamDefCollection<ParamDefKind>\n) {\n  const filteredParamDefCollection: ParamDefCollection<TParamType> = {};\n\n  Object.keys(paramDefCollection).forEach((name) => {\n    const paramDef = paramDefCollection[name];\n    if (paramDef[\"~internal\"].kind === type) {\n      filteredParamDefCollection[name] =\n        paramDef as ParamDefCollection<TParamType>[string];\n    }\n  });\n\n  return filteredParamDefCollection;\n}\n","import {\n  RouterLocation,\n  UmbrellaParamDef,\n  UmbrellaParamDefCollection,\n  QueryStringSerializer,\n  PathDef,\n} from \"./types\";\nimport { assert } from \"./assert\";\nimport { TypeRouteError } from \"./TypeRouteError\";\nimport { typeOf } from \"./typeOf\";\n\ntype ParamWithContextCollection = Record<\n  string,\n  { valueSerializerId?: string; array: boolean; value: string | null }\n>;\n\nexport function createLocation({\n  paramCollection,\n  paramDefCollection,\n  arraySeparator,\n  queryStringSerializer,\n  pathDefs,\n  baseUrl,\n}: {\n  paramCollection: Record<string, unknown>;\n  paramDefCollection: UmbrellaParamDefCollection;\n  arraySeparator: string;\n  queryStringSerializer: QueryStringSerializer;\n  pathDefs: PathDef[];\n  baseUrl: string;\n}): RouterLocation {\n  const params = {\n    path: {} as ParamWithContextCollection,\n    query: {} as ParamWithContextCollection,\n    state: {} as ParamWithContextCollection,\n  };\n\n  for (const paramName in paramDefCollection) {\n    const paramValue = paramCollection[paramName];\n\n    if (paramValue === undefined) {\n      continue;\n    }\n\n    const paramDef = paramDefCollection[paramName];\n    const urlEncodeDefault =\n      paramDef[\"~internal\"].kind !== \"state\" && !paramDef[\"~internal\"].trailing;\n    const urlEncode =\n      paramDef[\"~internal\"].valueSerializer.urlEncode ?? urlEncodeDefault;\n\n    const getValue = (paramValue: unknown) => {\n      let value: string | null;\n\n      if (paramDef[\"~internal\"].array) {\n        if (!Array.isArray(paramValue)) {\n          if (__DEV__) {\n            throw TypeRouteError.Expected_type_does_not_match_actual_type.create(\n              {\n                context: \"routes[routeName](...)\",\n                actualType: typeOf(paramValue),\n                expectedType: \"array\",\n                value: paramValue,\n                valueName: paramName,\n              }\n            );\n          }\n        }\n\n        value =\n          (paramValue as unknown[]).length === 0\n            ? null\n            : (paramValue as unknown[])\n                .map((part) => stringify(paramDef, part, urlEncode))\n                .join(arraySeparator);\n      } else {\n        value = stringify(paramDef, paramValue, urlEncode);\n      }\n\n      return value;\n    };\n\n    const value = getValue(paramValue);\n\n    if (\n      paramDef[\"~internal\"].kind === \"query\" &&\n      paramDef[\"~internal\"].default !== undefined &&\n      getValue(paramDef[\"~internal\"].default) === value\n    ) {\n      continue;\n    }\n\n    params[paramDef[\"~internal\"].kind][paramName] = {\n      valueSerializerId: paramDef[\"~internal\"].valueSerializer.id,\n      array: paramDef[\"~internal\"].array,\n      value,\n    };\n  }\n\n  const path =\n    \"/\" +\n    pathDefs[0]\n      .filter(({ namedParamDef }) => {\n        return !(\n          namedParamDef?.[\"~internal\"].optional &&\n          params.path[namedParamDef.paramName] === undefined\n        );\n      })\n      .map(({ namedParamDef, leading, trailing }) => {\n        const rawParam = namedParamDef\n          ? params.path[namedParamDef.paramName].value\n          : \"\";\n        return leading + rawParam + trailing;\n      })\n      .join(\"/\");\n\n  const hasQueryParams = Object.keys(params.query).length > 0;\n\n  const query = hasQueryParams\n    ? queryStringSerializer.stringify(params.query)\n    : undefined;\n\n  if (__DEV__) {\n    if (hasQueryParams) {\n      assert(\"query\", [assert.type(\"string\", \"query\", query)]);\n    }\n  }\n\n  const state =\n    Object.keys(params.state).length === 0\n      ? undefined\n      : Object.keys(params.state).reduce(\n          (state, key) => ({\n            ...state,\n            [key]: params.state[key].value,\n          }),\n          {}\n        );\n\n  return {\n    fullPath: (baseUrl === \"/\" ? \"\" : baseUrl) + path,\n    path,\n    query,\n    state,\n  };\n}\n\nfunction stringify(\n  paramDef: UmbrellaParamDef,\n  value: unknown,\n  urlEncode: boolean\n) {\n  const result = paramDef[\"~internal\"].valueSerializer.stringify(value);\n\n  if (__DEV__) {\n    assert(\"[ValueSerializer].stringify\", [\n      assert.type(\"string\", \"result\", result),\n    ]);\n  }\n\n  return urlEncode ? encodeURIComponent(result) : result;\n}\n","export const noMatch = { __noMatch: true } as const;\n","export const stringUtils = { startsWith, endsWith, splitFirst };\n\nfunction startsWith(value: string, start: string) {\n  for (let i = 0; i < start.length; i++) {\n    if (start[i] !== value[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction endsWith(value: string, end: string) {\n  for (let i = 1; i <= end.length; i++) {\n    if (end[end.length - i] !== value[value.length - i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction splitFirst(value: string, split: string) {\n  const [first, ...rest] = value.split(split);\n  return [first, rest.join(split)] as const;\n}\n","import { noMatch } from \"./noMatch\";\nimport { PathDef } from \"./types\";\nimport { stringUtils } from \"./stringUtils\";\n\nconst { endsWith, startsWith } = stringUtils;\n\nexport function getPathMatch({\n  path,\n  pathDefs,\n  arraySeparator,\n}: {\n  path: string;\n  pathDefs: PathDef[];\n  arraySeparator: string;\n}) {\n  for (let index = 0; index < pathDefs.length; index++) {\n    const result = match(pathDefs[index]);\n    if (result !== false) {\n      return { ...result, primaryPath: index === 0 };\n    }\n  }\n\n  return false;\n\n  function match(pathDef: PathDef) {\n    const params: Record<string, unknown> = {};\n\n    if (path === \"/\" && pathDef.length === 0) {\n      return { params, numExtraneousParams: 0 };\n    }\n\n    const pathHasTrailingSlash = path.length > 1 && endsWith(path, \"/\");\n\n    if (pathHasTrailingSlash) {\n      path = path.slice(0, path.length - 1);\n    }\n\n    const pathSegmentList = path.split(\"/\").slice(1);\n\n    for (\n      let segmentIndex = 0;\n      segmentIndex < Math.max(pathDef.length, pathSegmentList.length);\n      segmentIndex++\n    ) {\n      const pathSegmentDef =\n        segmentIndex >= pathDef.length ? null : pathDef[segmentIndex];\n      let pathSegment =\n        segmentIndex >= pathSegmentList.length\n          ? null\n          : pathSegmentList[segmentIndex];\n\n      if (pathSegmentDef === null) {\n        return false;\n      }\n\n      const numRemainingPathSegmentDefs = pathDef.length - 1 - segmentIndex;\n\n      if (pathSegment === null) {\n        if (\n          numRemainingPathSegmentDefs !== 0 ||\n          !pathSegmentDef.namedParamDef?.[\"~internal\"].optional\n        ) {\n          return false;\n        }\n\n        break;\n      }\n\n      if (pathSegmentDef.namedParamDef?.[\"~internal\"].trailing) {\n        pathSegment = pathSegmentList.slice(segmentIndex).join(\"/\");\n      }\n\n      if (!startsWith(pathSegment, pathSegmentDef.leading)) {\n        return false;\n      }\n\n      const pathSegmentMinusLeading = pathSegment.slice(\n        pathSegmentDef.leading.length\n      );\n\n      if (!endsWith(pathSegmentMinusLeading, pathSegmentDef.trailing)) {\n        return false;\n      }\n\n      const pathSegmentMinusLeadingAndTrailing = pathSegmentMinusLeading.slice(\n        0,\n        pathSegmentMinusLeading.length - pathSegmentDef.trailing.length\n      );\n\n      if (!pathSegmentDef.namedParamDef) {\n        if (pathSegmentMinusLeadingAndTrailing === \"\") {\n          continue;\n        }\n\n        return false;\n      }\n\n      if (pathSegmentMinusLeadingAndTrailing === \"\") {\n        if (pathSegmentDef.namedParamDef[\"~internal\"].optional) {\n          continue;\n        }\n\n        return false;\n      }\n\n      const urlEncode =\n        pathSegmentDef.namedParamDef[\"~internal\"].valueSerializer.urlEncode ??\n        !pathSegmentDef.namedParamDef[\"~internal\"].trailing;\n\n      let value;\n\n      if (pathSegmentDef.namedParamDef[\"~internal\"].array) {\n        value = pathSegmentMinusLeadingAndTrailing\n          .split(arraySeparator)\n          .map((part) => {\n            return pathSegmentDef.namedParamDef?.[\n              \"~internal\"\n            ].valueSerializer.parse(\n              urlEncode ? decodeURIComponent(part) : part\n            );\n          });\n\n        if (value.some((part) => part === noMatch)) {\n          return false;\n        }\n      } else {\n        value = pathSegmentDef.namedParamDef[\"~internal\"].valueSerializer.parse(\n          urlEncode\n            ? decodeURIComponent(pathSegmentMinusLeadingAndTrailing)\n            : pathSegmentMinusLeadingAndTrailing\n        );\n\n        if (value === noMatch) {\n          return false;\n        }\n      }\n\n      if (\n        pathSegmentDef.namedParamDef[\"~internal\"].trailing &&\n        pathHasTrailingSlash &&\n        pathSegmentDef.trailing === \"\"\n      ) {\n        value = `${value}/`;\n      }\n\n      params[pathSegmentDef.namedParamDef.paramName] = value;\n\n      if (pathSegmentDef.namedParamDef[\"~internal\"].trailing) {\n        break;\n      }\n    }\n\n    return { params, numExtraneousParams: 0 };\n  }\n}\n","import { UmbrellaParamDefCollection } from \"./types\";\nimport { noMatch } from \"./noMatch\";\n\nexport function getObjectMatch({\n  object,\n  paramDefs,\n  urlEncodeDefault,\n  arraySeparator,\n}: {\n  object: Record<string, string | null>;\n  paramDefs: UmbrellaParamDefCollection;\n  urlEncodeDefault: boolean;\n  arraySeparator: string;\n}) {\n  const params: Record<string, unknown> = {};\n\n  const namedParamDefs = Object.keys(paramDefs).map((name) => {\n    return { name, ...paramDefs[name] };\n  });\n\n  const extraneousParams = { ...object };\n\n  for (const paramDef of namedParamDefs) {\n    let raw = object[paramDef.name];\n    delete extraneousParams[paramDef.name];\n\n    if (raw === undefined) {\n      if (paramDef[\"~internal\"].optional) {\n        continue;\n      }\n\n      return false;\n    }\n\n    let value;\n\n    if (raw === null) {\n      if (paramDef[\"~internal\"].array) {\n        value = [];\n      } else if (paramDef[\"~internal\"].optional) {\n        continue;\n      } else {\n        return false;\n      }\n    } else if (paramDef[\"~internal\"].array) {\n      value = raw.split(arraySeparator).map((part) => {\n        return paramDef[\"~internal\"].valueSerializer.parse(\n          paramDef[\"~internal\"].valueSerializer.urlEncode ?? urlEncodeDefault\n            ? decodeURIComponent(part)\n            : part\n        );\n      });\n\n      if (value.some((part) => part === noMatch)) {\n        if (paramDef[\"~internal\"].optional) {\n          continue;\n        }\n\n        return false;\n      }\n    } else {\n      value = paramDef[\"~internal\"].valueSerializer.parse(\n        paramDef[\"~internal\"].valueSerializer.urlEncode ?? urlEncodeDefault\n          ? decodeURIComponent(raw)\n          : raw\n      );\n\n      if (value === noMatch) {\n        if (paramDef[\"~internal\"].optional) {\n          continue;\n        }\n\n        return false;\n      }\n    }\n\n    params[paramDef.name] = value;\n  }\n\n  return { params, numExtraneousParams: Object.keys(extraneousParams).length };\n}\n","import { ParamDefCollection } from \"./types\";\nimport { getObjectMatch } from \"./getObjectMatch\";\n\nexport function getStateMatch(\n  state: Record<string, string> | undefined,\n  paramDefs: ParamDefCollection<\"state\">,\n  arraySeparator: string\n) {\n  return getObjectMatch({\n    object: state ?? {},\n    paramDefs,\n    urlEncodeDefault: false,\n    arraySeparator,\n  });\n}\n","import { getObjectMatch } from \"./getObjectMatch\";\nimport { ParamDefCollection, QueryStringSerializer } from \"./types\";\nimport { assert } from \"./assert\";\n\nexport function getQueryMatch(\n  query: string | undefined,\n  paramDefs: ParamDefCollection<\"query\">,\n  queryStringSerializer: QueryStringSerializer,\n  arraySeparator: string\n) {\n  let object: Record<string, string | null> = {};\n\n  if (query) {\n    object = queryStringSerializer.parse(query);\n\n    if (__DEV__) {\n      assert(\"[QueryStringSerializer].parse\", [\n        assert.collectionOfType(\n          [\"string\", \"null\"],\n          \"parsedQueryString\",\n          object\n        ),\n      ]);\n    }\n  }\n\n  return getObjectMatch({\n    object,\n    paramDefs,\n    urlEncodeDefault: true,\n    arraySeparator,\n  });\n}\n","import {\n  RouterLocation,\n  PathDef,\n  QueryStringSerializer,\n  UmbrellaParamDefCollection,\n} from \"./types\";\nimport { getPathMatch } from \"./getPathMatch\";\nimport { getStateMatch } from \"./getStateMatch\";\nimport { getQueryMatch } from \"./getQueryMatch\";\nimport { getParamDefsOfType } from \"./getParamDefsOfType\";\n\nexport function createMatcher({\n  pathDefs,\n  params,\n}: {\n  pathDefs: PathDef[];\n  params: UmbrellaParamDefCollection;\n}) {\n  const queryParamDefCollection = getParamDefsOfType(\"query\", params);\n  const stateParamDefCollection = getParamDefsOfType(\"state\", params);\n\n  const defaultParams: Record<string, unknown> = {};\n\n  Object.keys(params).forEach((paramName) => {\n    const param = params[paramName];\n    if (param[\"~internal\"].default === undefined) {\n      return;\n    }\n    defaultParams[paramName] = param[\"~internal\"].default;\n  });\n\n  return ({\n    routerLocation,\n    arraySeparator,\n    queryStringSerializer,\n  }: {\n    routerLocation: RouterLocation;\n    queryStringSerializer: QueryStringSerializer;\n    arraySeparator: string;\n  }) => {\n    if (routerLocation.path === undefined) {\n      return false;\n    }\n\n    const pathMatch = getPathMatch({\n      path: routerLocation.path,\n      pathDefs,\n      arraySeparator,\n    });\n\n    if (pathMatch === false) {\n      return false;\n    }\n\n    const queryMatch = getQueryMatch(\n      routerLocation.query,\n      queryParamDefCollection,\n      queryStringSerializer,\n      arraySeparator\n    );\n    if (queryMatch === false) {\n      return false;\n    }\n\n    const stateMatch = getStateMatch(\n      routerLocation.state,\n      stateParamDefCollection,\n      arraySeparator\n    );\n    if (stateMatch === false) {\n      return false;\n    }\n\n    return {\n      primaryPath: pathMatch.primaryPath,\n      params: {\n        ...defaultParams,\n        ...pathMatch.params,\n        ...queryMatch.params,\n        ...stateMatch.params,\n      },\n      numExtraneousParams:\n        pathMatch.numExtraneousParams +\n        queryMatch.numExtraneousParams +\n        stateMatch.numExtraneousParams,\n    };\n  };\n}\n","import { ClickEvent } from \"./types\";\n\nexport function preventDefaultLinkClickBehavior(event: any = {}) {\n  const e = event as ClickEvent;\n  const isModifiedEvent = !!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey);\n\n  const isSelfTarget =\n    !e.target || !e.target.target || e.target.target === \"_self\";\n\n  if (\n    isSelfTarget && // Ignore everything but links with target self\n    !e.defaultPrevented && // onClick prevented default\n    e.button === 0 && // ignore everything but left clicks\n    !isModifiedEvent // ignore clicks with modifier keys\n  ) {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n\n    return true;\n  }\n\n  return false;\n}\n","import {\n  UmbrellaRoute,\n  RouterLocation,\n  RouterContext,\n  NavigateOptions,\n} from \"./types\";\nimport { preventDefaultLinkClickBehavior } from \"./preventDefaultLinkClickBehavior\";\nimport { stringUtils } from \"./stringUtils\";\n\nconst { startsWith } = stringUtils;\n\nexport function buildRoute({\n  routeName,\n  params,\n  location,\n  routerContext,\n}: {\n  routeName: string | false;\n  params: Record<string, unknown>;\n  location: RouterLocation;\n  routerContext: RouterContext;\n}): UmbrellaRoute {\n  const { navigate, history } = routerContext;\n\n  let href = history.createHref({\n    pathname: routeName === false ? location.fullPath : location.path,\n    search: location.query ? \"?\" + location.query : \"\",\n  });\n\n  if (startsWith(href, \"#\")) {\n    href = \"/\" + href;\n  }\n\n  if (routeName !== false && routerContext.baseUrl !== \"/\") {\n    href = routerContext.baseUrl + href;\n  }\n\n  const route: UmbrellaRoute = {\n    name: routeName,\n    params,\n    href,\n    link: {\n      href,\n      onClick: (event) => {\n        if (preventDefaultLinkClickBehavior(event)) {\n          return route.push();\n        }\n      },\n    },\n    action: null,\n    push: (options?: NavigateOptions) =>\n      navigate({ ...route, action: \"push\" }, true, options),\n    replace: (options?: NavigateOptions) =>\n      navigate({ ...route, action: \"replace\" }, true, options),\n  };\n\n  return route;\n}\n","import { UmbrellaRouteDef, UmbrellaRouteBuilder, RouterContext } from \"./types\";\nimport { buildPathDefs } from \"./buildPathDefs\";\nimport { getParamDefsOfType } from \"./getParamDefsOfType\";\nimport { createLocation } from \"./createLocation\";\nimport { createMatcher } from \"./createMatcher\";\nimport { assert } from \"./assert\";\nimport { buildRoute } from \"./buildRoute\";\nimport { TypeRouteError } from \"./TypeRouteError\";\n\nexport function createRouteBuilder(\n  routeName: string,\n  routeDef: UmbrellaRouteDef,\n  getRouterContext: () => RouterContext\n): UmbrellaRouteBuilder {\n  const pathDefs = buildPathDefs(\n    routeName,\n    getParamDefsOfType(\"path\", routeDef[\"~internal\"].params),\n    routeDef[\"~internal\"].path\n  );\n\n  const build: UmbrellaRouteBuilder = function (\n    params: Record<string, unknown> = {}\n  ) {\n    if (__DEV__) {\n      assert(`routes.${routeName}`, [\n        assert.numArgs([].slice.call(arguments), 0, 1),\n        assert.type(\"object\", \"params\", params),\n      ]);\n\n      for (const paramKey in params) {\n        if (!(paramKey in routeDef[\"~internal\"].params)) {\n          throw TypeRouteError.Encountered_unexpected_parameter_when_building_route.create(\n            {\n              routeName,\n              unexpectedParameterName: paramKey,\n              allowedParameterNames: Object.keys(routeDef[\"~internal\"].params),\n            }\n          );\n        }\n      }\n\n      for (const paramKey in routeDef[\"~internal\"].params) {\n        const value = params[paramKey];\n        const paramDef = routeDef[\"~internal\"].params[paramKey][\"~internal\"];\n\n        if (value === undefined) {\n          if (!paramDef.optional) {\n            throw TypeRouteError.Missing_required_parameter_when_building_route.create(\n              {\n                routeName,\n                missingParameterName: paramKey,\n              }\n            );\n          }\n\n          continue;\n        }\n      }\n    }\n\n    const routerContext = getRouterContext();\n\n    const { arraySeparator, queryStringSerializer, baseUrl } = routerContext;\n\n    const paramsWithDefault = { ...params };\n\n    Object.keys(routeDef[\"~internal\"].params).forEach((paramName) => {\n      const paramDef = routeDef[\"~internal\"].params[paramName];\n\n      if (\n        paramsWithDefault[paramName] === undefined &&\n        paramDef[\"~internal\"].default !== undefined\n      ) {\n        paramsWithDefault[paramName] = paramDef[\"~internal\"].default;\n      }\n    });\n\n    const location = createLocation({\n      paramCollection: params,\n      paramDefCollection: routeDef[\"~internal\"].params,\n      arraySeparator,\n      queryStringSerializer,\n      pathDefs,\n      baseUrl,\n    });\n\n    return buildRoute({\n      routeName,\n      params: paramsWithDefault,\n      location,\n      routerContext,\n    }) as any;\n  };\n\n  Object.defineProperty(build, \"name\", { value: routeName });\n\n  build[\"~internal\"] = {\n    type: \"RouteBuilder\",\n    match: createMatcher({\n      pathDefs,\n      params: routeDef[\"~internal\"].params,\n    }) as any,\n    pathDefs,\n    Route: null as any,\n  };\n\n  return build;\n}\n","import { QueryStringSerializer, QueryStringArrayFormat } from \"./types\";\nimport { stringUtils } from \"./stringUtils\";\n\nexport function createQueryStringSerializer(\n  args: {\n    queryStringArrayFormat?: QueryStringArrayFormat;\n    arraySeparator?: string;\n  } = {}\n): QueryStringSerializer {\n  const queryStringArrayFormat =\n    args.queryStringArrayFormat ?? \"singleKeyWithBracket\";\n  const arraySeparator = args.arraySeparator ?? \",\";\n\n  const multiKey =\n    queryStringArrayFormat === \"multiKey\" ||\n    queryStringArrayFormat === \"multiKeyWithBracket\";\n\n  const arrayKeySuffix =\n    queryStringArrayFormat === \"multiKey\" ||\n    queryStringArrayFormat === \"singleKey\"\n      ? \"\"\n      : \"[]\";\n\n  return {\n    parse: (raw) => {\n      const queryParams: Record<string, string | null> = {};\n\n      for (const part of raw.split(\"&\")) {\n        const [rawParamName, rawParamValue, ...rest] = part.split(\"=\");\n\n        if (rawParamName === undefined || rest.length > 0) {\n          continue;\n        }\n\n        const key = decodeURIComponent(\n          stringUtils.endsWith(rawParamName, arrayKeySuffix)\n            ? rawParamName.slice(0, rawParamName.length - arrayKeySuffix.length)\n            : rawParamName\n        );\n\n        if (rawParamValue === undefined) {\n          queryParams[key] = null;\n        } else if (queryParams[key] && multiKey) {\n          queryParams[key] += `${arraySeparator}${rawParamValue}`;\n        } else {\n          queryParams[key] = rawParamValue;\n        }\n      }\n\n      return queryParams;\n    },\n\n    stringify: (queryParams) => {\n      return Object.keys(queryParams)\n        .map((name) => {\n          const encodedName = encodeURIComponent(name);\n          const key = queryParams[name].array\n            ? `${encodedName}${arrayKeySuffix}`\n            : encodedName;\n          const value = queryParams[name].value;\n\n          if (value === null) {\n            return key;\n          }\n\n          if (queryParams[name].array && multiKey) {\n            const valueParts = value.split(arraySeparator);\n            return valueParts.map((part) => `${key}=${part}`).join(\"&\");\n          }\n\n          return `${key}=${value}`;\n        })\n        .join(\"&\");\n    },\n  };\n}\n","import { RouterLocation, UmbrellaRoute, Match, RouterContext } from \"./types\";\nimport { buildRoute } from \"./buildRoute\";\n\nexport function getMatchingRoute(\n  location: RouterLocation,\n  routerContext: RouterContext\n): { route: UmbrellaRoute; primaryPath: boolean } {\n  const { getRoutes, queryStringSerializer, arraySeparator } = routerContext;\n\n  const routes = getRoutes();\n\n  let nonExactMatch: (Match & { routeName: string }) | false = false;\n\n  for (const routeName in routes) {\n    const match = routes[routeName][\"~internal\"].match({\n      routerLocation: location,\n      queryStringSerializer,\n      arraySeparator,\n    });\n\n    if (match === false) {\n      continue;\n    }\n\n    if (match.numExtraneousParams === 0) {\n      return {\n        route: routes[routeName](match.params),\n        primaryPath: match.primaryPath,\n      };\n    }\n\n    if (\n      nonExactMatch === false ||\n      match.numExtraneousParams < nonExactMatch.numExtraneousParams\n    ) {\n      nonExactMatch = { ...match, routeName };\n    }\n  }\n\n  if (nonExactMatch) {\n    return {\n      route: routes[nonExactMatch.routeName](nonExactMatch.params),\n      primaryPath: nonExactMatch.primaryPath,\n    };\n  }\n\n  return {\n    route: buildRoute({\n      routeName: false,\n      params: {},\n      location,\n      routerContext,\n    }),\n    primaryPath: true,\n  };\n}\n","import { RouterLocation } from \"./types\";\nimport { Location as HistoryLocation } from \"history\";\nimport { stringUtils } from \"./stringUtils\";\n\nconst { startsWith } = stringUtils;\n\nexport function convertToRouterLocationFromHistoryLocation(\n  rawLocation: Pick<HistoryLocation, \"pathname\" | \"search\" | \"state\">,\n  baseUrl: string\n): RouterLocation {\n  return {\n    fullPath: rawLocation.pathname,\n    path: startsWith(rawLocation.pathname, baseUrl)\n      ? baseUrl !== \"/\"\n        ? rawLocation.pathname.replace(baseUrl, \"\")\n        : rawLocation.pathname\n      : undefined,\n    query: rawLocation.search\n      ? startsWith(rawLocation.search, \"?\")\n        ? rawLocation.search.slice(1)\n        : rawLocation.search\n      : undefined,\n    state:\n      typeof rawLocation.state === \"object\" && rawLocation.state !== null\n        ? (rawLocation.state as { state?: Record<string, string> }).state\n        : undefined,\n  };\n}\n","import { RouterContext } from \"./types\";\nimport { convertToRouterLocationFromHistoryLocation } from \"./convertToRouterLocationFromHistoryLocation\";\nimport { getMatchingRoute } from \"./getMatchingRoute\";\nimport { stringUtils } from \"./stringUtils\";\n\nconst { splitFirst } = stringUtils;\n\nexport function getRouteByHref(\n  href: string,\n  state: any,\n  routerContext: RouterContext\n) {\n  const [pathname, search] = splitFirst(href, \"?\");\n\n  const location = convertToRouterLocationFromHistoryLocation(\n    {\n      pathname,\n      search,\n      state,\n    },\n    routerContext.baseUrl\n  );\n\n  return getMatchingRoute(location, routerContext);\n}\n","import { UmbrellaNavigationHandler } from \"./types\";\n\nexport function createNavigationHandlerManager({\n  startListening,\n  stopListening,\n}: {\n  startListening: () => void;\n  stopListening: () => void;\n}) {\n  const handlerIdList: {\n    handler: UmbrellaNavigationHandler;\n    id: number;\n  }[] = [];\n  let idCounter = 0;\n\n  return { add, getHandlers };\n\n  function getHandlers() {\n    return handlerIdList.map(({ handler }) => handler);\n  }\n\n  function add(handler: UmbrellaNavigationHandler) {\n    const id = idCounter++;\n    handlerIdList.push({ id, handler });\n\n    if (handlerIdList.length === 1) {\n      startListening();\n    }\n\n    return remove;\n\n    function remove() {\n      const index = handlerIdList.map(({ id }) => id).indexOf(id);\n      if (index >= 0) {\n        handlerIdList.splice(index, 1);\n        if (handlerIdList.length === 0) {\n          stopListening();\n        }\n      }\n    }\n  }\n}\n","import { UmbrellaRoute } from \"./types\";\n\nexport function attemptScrollToTop(\n  route: UmbrellaRoute,\n  scrollToTop: boolean | undefined\n) {\n  if (\n    route.action === \"push\" &&\n    typeof window === \"object\" &&\n    window !== null &&\n    typeof window.scroll === \"function\" &&\n    scrollToTop !== false &&\n    typeof navigator === \"object\" &&\n    navigator !== null &&\n    typeof navigator.userAgent === \"string\" &&\n    !(\n      navigator.userAgent.indexOf(\"Node.js\") > 0 ||\n      navigator.userAgent.indexOf(\"jsdom\") > 0\n    )\n  ) {\n    try {\n      window.scroll(0, 0);\n    } catch {}\n  }\n}\n","import { UmbrellaRoute, UmbrellaRouteDefCollection } from \"./types\";\n\nexport function serializeStateParams(\n  route: UmbrellaRoute,\n  routeDefs: UmbrellaRouteDefCollection\n) {\n  const state: Record<string, string> = {};\n\n  if (route.name) {\n    const sortedParams = Object.keys(route.params).sort();\n    for (const paramName of sortedParams) {\n      const paramDef =\n        routeDefs[route.name][\"~internal\"].params[paramName][\"~internal\"];\n\n      if (paramDef.kind === \"state\") {\n        const value = route.params[paramName];\n        state[paramName] = paramDef.valueSerializer.stringify(value);\n      }\n    }\n  }\n\n  return state;\n}\n","import {\n  CoreRouter,\n  Action,\n  SessionOpts,\n  UmbrellaRouteBuilder,\n  UmbrellaCoreRouter,\n  UmbrellaRoute,\n  UmbrellaRouteDefCollection,\n  RouterContext,\n  UmbrellaBlocker,\n  RouterOpts,\n  NavigateOptions,\n} from \"./types\";\nimport { createRouteBuilder } from \"./createRouteBuilder\";\nimport {\n  createBrowserHistory,\n  History,\n  createMemoryHistory,\n  createHashHistory,\n} from \"history\";\nimport { createQueryStringSerializer } from \"./createQueryStringSerializer\";\nimport { assert } from \"./assert\";\nimport { TypeRouteError } from \"./TypeRouteError\";\nimport { getMatchingRoute } from \"./getMatchingRoute\";\nimport { convertToRouterLocationFromHistoryLocation } from \"./convertToRouterLocationFromHistoryLocation\";\nimport { getRouteByHref } from \"./getRouteByHref\";\nimport { createNavigationHandlerManager } from \"./createNavigationHandlerManager\";\nimport { stringUtils } from \"./stringUtils\";\nimport { attemptScrollToTop } from \"./attemptScrollToTop\";\nimport { serializeStateParams } from \"./serializeStateParams\";\n\nconst { startsWith, splitFirst } = stringUtils;\n\nexport function createRouter<\n  TRouteDefCollection extends { [routeName: string]: any }\n>(routeDefs: TRouteDefCollection): CoreRouter<TRouteDefCollection>;\nexport function createRouter<\n  TRouteDefCollection extends { [routeName: string]: any }\n>(\n  opts: RouterOpts,\n  routeDefs: TRouteDefCollection\n): CoreRouter<TRouteDefCollection>;\nexport function createRouter(...args: any[]): UmbrellaCoreRouter {\n  const { routeDefs, opts } = parseArgs(args);\n\n  const navigationHandlerManager = createNavigationHandlerManager({\n    startListening: () => {\n      unlisten = history.listen((update) => {\n        if (skipNextEnvironmentTriggeredNavigation) {\n          skipNextEnvironmentTriggeredNavigation = false;\n          return;\n        }\n\n        const location = convertToRouterLocationFromHistoryLocation(\n          update.location,\n          baseUrl\n        );\n        const action = update.action.toLowerCase() as Action;\n        const { route, primaryPath } = getMatchingRoute(\n          location,\n          getRouterContext()\n        );\n\n        handleNavigation({ ...route, action }, primaryPath);\n      });\n    },\n    stopListening: () => unlisten?.(),\n  });\n\n  const baseUrl = opts.baseUrl ?? \"/\";\n  const arraySeparator = opts.arrayFormat?.separator ?? \",\";\n  const queryStringSerializer =\n    opts.queryStringSerializer ??\n    createQueryStringSerializer({\n      queryStringArrayFormat: opts.arrayFormat?.queryString,\n      arraySeparator,\n    });\n\n  let history: History;\n  let unlisten: (() => void) | undefined;\n  let skipNextEnvironmentTriggeredNavigation = false;\n  let skipHandlingNextApplicationTriggeredNavigation = false;\n  let initialRoute: UmbrellaRoute | null = null;\n  let previousRoute: UmbrellaRoute | null = null;\n  let blockerCollection: UmbrellaBlocker[] = [];\n\n  applySessionOpts(opts.session);\n\n  const routes = createRouteBuilderCollection(getRouterContext);\n\n  const router: UmbrellaCoreRouter = {\n    routes,\n    session: {\n      push(href, state, options: NavigateOptions) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].push\", [\n            assert.numArgs([].slice.call(arguments), 1, 2),\n            assert.type(\"string\", \"href\", href),\n            assert.type([\"object\", \"undefined\"], \"state\", state),\n          ]);\n        }\n\n        const { route, primaryPath } = getRouteByHref(\n          href,\n          state,\n          getRouterContext()\n        );\n\n        return navigate({ ...route, action: \"push\" }, primaryPath, options);\n      },\n      replace(href, state, options: NavigateOptions) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].replace\", [\n            assert.numArgs([].slice.call(arguments), 1, 2),\n            assert.type(\"string\", \"href\", href),\n            assert.type([\"object\", \"undefined\"], \"state\", state),\n          ]);\n        }\n\n        const { route, primaryPath } = getRouteByHref(\n          href,\n          state,\n          getRouterContext()\n        );\n\n        return navigate({ ...route, action: \"replace\" }, primaryPath, options);\n      },\n      back(amount = 1) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].back\", [\n            assert.numArgs([].slice.call(arguments), 0, 1),\n            assert.type(\"number\", \"amount\", amount),\n          ]);\n        }\n\n        history.go(-amount);\n      },\n      forward(amount = 1) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].forward\", [\n            assert.numArgs([].slice.call(arguments), 0, 1),\n            assert.type(\"number\", \"amount\", amount),\n          ]);\n        }\n\n        history.go(amount);\n      },\n      getInitialRoute() {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].getInitialRoute\", [\n            assert.numArgs([].slice.call(arguments), 0),\n          ]);\n        }\n\n        if (!initialRoute) {\n          let result = getMatchingRoute(\n            convertToRouterLocationFromHistoryLocation(\n              history.location,\n              baseUrl\n            ),\n            getRouterContext()\n          );\n\n          if (!result.primaryPath) {\n            skipHandlingNextApplicationTriggeredNavigation = true;\n            result.route.replace();\n            result = getMatchingRoute(\n              convertToRouterLocationFromHistoryLocation(\n                history.location,\n                baseUrl\n              ),\n              getRouterContext()\n            );\n          }\n          initialRoute = result.route;\n        }\n\n        return initialRoute;\n      },\n      reset(session) {\n        if (__DEV__) {\n          assert(\"[RouterSessionHistory].reset\", [\n            assert.numArgs([].slice.call(arguments), 1),\n            assert.type(\"object\", \"session\", session),\n          ]);\n        }\n\n        return applySessionOpts(session);\n      },\n      block(blocker) {\n        blockerCollection.push(blocker);\n\n        const unblock = history.block((update) => {\n          const { route } = getMatchingRoute(\n            convertToRouterLocationFromHistoryLocation(\n              update.location,\n              baseUrl\n            ),\n            getRouterContext()\n          );\n\n          const action = update.action.toLowerCase() as Action;\n\n          blocker({ route: { ...route, action }, retry: update.retry });\n        });\n\n        return () => {\n          blockerCollection.splice(\n            blockerCollection.findIndex((item) => item === blocker),\n            1\n          );\n\n          unblock();\n        };\n      },\n      listen: (handler) => navigationHandlerManager.add(handler),\n    },\n  };\n\n  return router;\n\n  function applySessionOpts(\n    sessionOpts: SessionOpts = {\n      type:\n        typeof window !== \"undefined\" && typeof window.document !== \"undefined\"\n          ? \"browser\"\n          : \"memory\",\n    }\n  ) {\n    initialRoute = null;\n    if (sessionOpts.type === \"memory\") {\n      history = createMemoryHistory({\n        initialEntries: sessionOpts.initialEntries,\n        initialIndex: sessionOpts.initialIndex,\n      });\n    } else if (sessionOpts.type === \"hash\") {\n      history = createHashHistory({\n        window: sessionOpts.window,\n      });\n    } else {\n      history = createBrowserHistory({\n        window: sessionOpts.window,\n      });\n    }\n  }\n\n  function navigate(\n    route: UmbrellaRoute,\n    primaryPath: boolean,\n    options?: NavigateOptions\n  ) {\n    debugger;\n    if (blockerCollection.length > 0) {\n      blockerCollection.forEach((blocker) => {\n        blocker({\n          route,\n          retry: () => {\n            route[route.action === \"push\" ? \"push\" : \"replace\"](options);\n          },\n        });\n      });\n\n      return;\n    }\n\n    const state = serializeStateParams(route, routeDefs);\n\n    if (\n      previousRoute?.href === route.href &&\n      JSON.stringify(serializeStateParams(previousRoute, routeDefs)) ===\n        JSON.stringify(state)\n    ) {\n      return;\n    }\n\n    if (skipHandlingNextApplicationTriggeredNavigation) {\n      skipHandlingNextApplicationTriggeredNavigation = false;\n    } else if (options?.skipRender) {\n      // do nothing\n    } else {\n      handleNavigation(route, primaryPath);\n    }\n\n    skipNextEnvironmentTriggeredNavigation = true;\n\n    const [pathname, search] = splitFirst(route.href, \"?\");\n\n    history[route.action === \"replace\" ? \"replace\" : \"push\"](\n      {\n        pathname,\n        search: search ? `?${search}` : \"\",\n        hash: \"\",\n      },\n      state ? { state } : undefined\n    );\n  }\n\n  function handleNavigation(route: UmbrellaRoute, primaryPath: boolean) {\n    if (!primaryPath) {\n      route.replace();\n      return;\n    }\n\n    for (const handler of navigationHandlerManager.getHandlers()) {\n      handler(route);\n    }\n\n    attemptScrollToTop(route, opts.scrollToTop);\n\n    previousRoute = route;\n  }\n\n  function getRouterContext(): RouterContext {\n    return {\n      queryStringSerializer,\n      arraySeparator,\n      navigate,\n      history,\n      routeDefs,\n      getRoutes: () => routes,\n      baseUrl,\n    };\n  }\n}\n\nexport function parseArgs(args: any[]) {\n  const routeDefs: UmbrellaRouteDefCollection =\n    args.length === 1 ? args[0] : args[1];\n  const opts: RouterOpts = args.length === 1 ? {} : args[0];\n\n  if (__DEV__) {\n    assert(\"createRouter\", [\n      assert.numArgs(args, 1, 2),\n      assert.collectionOfType(\"RouteDef\", \"routeDefs\", routeDefs),\n      assert.type(\"object\", \"opts\", opts),\n    ]);\n\n    if (opts.arrayFormat?.queryString && opts.queryStringSerializer) {\n      throw TypeRouteError.Query_string_array_format_and_custom_query_string_serializer_may_not_both_be_provided.create();\n    }\n\n    if (typeof opts.baseUrl === \"string\") {\n      if (!startsWith(opts.baseUrl, \"/\")) {\n        throw TypeRouteError.Base_url_must_start_with_a_forward_slash.create(\n          opts.baseUrl\n        );\n      }\n\n      if (\n        opts.baseUrl\n          .split(\"/\")\n          .some((part) => encodeURIComponent(part) !== part)\n      ) {\n        throw TypeRouteError.Base_url_must_not_contain_any_characters_that_must_be_url_encoded.create(\n          opts.baseUrl\n        );\n      }\n    }\n  }\n\n  return { routeDefs, opts };\n}\n\nfunction createRouteBuilderCollection(getRouterContext: () => RouterContext) {\n  const routes: Record<string, UmbrellaRouteBuilder> = {};\n  const { routeDefs } = getRouterContext();\n\n  for (const routeName in routeDefs) {\n    const routeDef = routeDefs[routeName];\n    routes[routeName] = createRouteBuilder(\n      routeName,\n      routeDef,\n      getRouterContext\n    );\n  }\n\n  return routes;\n}\n","import {\n  PathFn,\n  UmbrellaParamDefCollection,\n  RouteDef,\n  UmbrellaRouteDef,\n} from \"./types\";\nimport { TypeRouteError } from \"./TypeRouteError\";\nimport { assert } from \"./assert\";\nimport { asArray } from \"./asArray\";\n\nexport function defineRoute<TParamDefCollection>(\n  params: TParamDefCollection,\n  path: PathFn<TParamDefCollection>\n): RouteDef<TParamDefCollection>;\nexport function defineRoute(path: string | string[]): RouteDef<{}>;\nexport function defineRoute(...args: any[]): UmbrellaRouteDef {\n  assertDefineRouteOrExtendArgs(\"defineRoute\", args);\n\n  const parent = parseArgs(args);\n\n  const routeDef: UmbrellaRouteDef = {\n    \"~internal\": {\n      type: \"RouteDef\",\n      params: parent.params,\n      path: parent.path,\n    },\n    extend(...args: any[]) {\n      assertDefineRouteOrExtendArgs(\"extend\", args);\n\n      const { params, path } = parseArgs(args);\n\n      const parentParamNames = Object.keys(parent.params);\n      const extensionParamNames = Object.keys(params);\n\n      const duplicateParamNames = parentParamNames.filter(\n        (name) => extensionParamNames.indexOf(name) >= 0\n      );\n\n      if (__DEV__) {\n        if (duplicateParamNames.length > 0) {\n          throw TypeRouteError.Extension_route_definition_parameter_names_may_not_be_the_same_as_base_route_definition_parameter_names.create(\n            duplicateParamNames\n          );\n        }\n      }\n\n      return defineRoute(\n        {\n          ...params,\n          ...parent.params,\n        },\n        (x) => {\n          const parentPathArray = asArray(\n            parent.path(filter(parentParamNames))\n          );\n          const childPathArray = asArray(path(filter(extensionParamNames)));\n\n          return ([] as string[]).concat(\n            ...parentPathArray.map((parentPath) =>\n              childPathArray.map((childPath) => {\n                if (parentPath === \"/\") {\n                  return childPath;\n                }\n\n                return parentPath + (childPath === \"/\" ? \"\" : childPath);\n              })\n            )\n          );\n\n          function filter(allowedKeys: string[]) {\n            const filteredX: Record<string, string> = {};\n\n            allowedKeys.forEach((key) => {\n              filteredX[key] = (x as Record<string, string>)[key];\n            });\n\n            return filteredX;\n          }\n        }\n      );\n    },\n  };\n\n  return routeDef;\n}\n\nfunction assertDefineRouteOrExtendArgs(functionName: string, args: any[]) {\n  if (__DEV__) {\n    if (args.length === 1) {\n      if (Array.isArray(args[0])) {\n        assert(functionName, [assert.arrayOfType(\"string\", \"path\", args[0])]);\n      } else {\n        assert(functionName, [assert.type(\"string\", \"path\", args[0])]);\n      }\n    } else {\n      assert(functionName, [\n        assert.numArgs(args, 1, 2),\n        assert.collectionOfType(\"ParamDef\", \"params\", args[0]),\n        assert.type(\"function\", \"path\", args[1]),\n      ]);\n    }\n  }\n}\n\nfunction parseArgs(args: any[]): {\n  params: UmbrellaParamDefCollection;\n  path: PathFn<UmbrellaParamDefCollection>;\n} {\n  return args.length === 1\n    ? {\n        params: {},\n        path: () => args[0],\n      }\n    : {\n        params: args[0],\n        path: args[1],\n      };\n}\n","import { noMatch } from \"./noMatch\";\nimport { ValueSerializer, ParamDefKind, ParamDef, ParamValue } from \"./types\";\nimport { assert } from \"./assert\";\n\nconst boolean: ValueSerializer<boolean> = {\n  id: \"boolean\",\n  parse: (raw) => (raw === \"true\" ? true : raw === \"false\" ? false : noMatch),\n  stringify: (value) => (value ? \"true\" : \"false\"),\n};\n\nconst number: ValueSerializer<number> = {\n  id: \"number\",\n  parse: (raw) => {\n    if (!isNumeric(raw)) {\n      return noMatch;\n    }\n\n    return parseFloat(raw);\n  },\n  stringify: (value) => value.toString(),\n};\n\nfunction isNumeric(value: string) {\n  return !isNaN(parseFloat(value)) && /^-?\\d*\\.?\\d*$/.test(value);\n}\n\nconst string: ValueSerializer<string> = {\n  id: \"string\",\n  parse: (raw) => raw,\n  stringify: (value) => value,\n};\n\nconst json = <TValue = unknown>() => {\n  const valueSerializer: ValueSerializer<TValue> = {\n    id: \"json\",\n    parse: (raw) => {\n      let value: TValue;\n\n      try {\n        value = JSON.parse(raw);\n      } catch {\n        return noMatch;\n      }\n\n      return value;\n    },\n    stringify: (value) => JSON.stringify(value),\n  };\n\n  return valueSerializer;\n};\n\nexport const param = {\n  path: {\n    ...getParamDefKindSection(\"path\", false),\n    trailing: getParamDefKindSection(\"path\", true),\n  },\n  query: getParamDefKindSection(\"query\", false),\n  state: getParamDefKindSection(\"state\", false),\n};\n\nfunction getParamDefKindSection<\n  TKind extends ParamDefKind,\n  TTrailing extends boolean\n>(kind: TKind, trailing: TTrailing) {\n  return {\n    ...getParamDefOptionalitySection(false, false),\n    array: getParamDefOptionalitySection(false, true),\n    optional: {\n      ...getParamDefOptionalitySection(true, false),\n      array: getParamDefOptionalitySection(true, true),\n    },\n  };\n\n  function getParamDefOptionalitySection<\n    TOptional extends boolean,\n    TArray extends boolean\n  >(optional: TOptional, array: TArray) {\n    return {\n      string: getParamDef({\n        \"~internal\": {\n          type: \"ParamDef\",\n          array,\n          kind,\n          optional,\n          valueSerializer: string,\n          trailing,\n          default: undefined as never,\n        },\n      }),\n\n      number: getParamDef({\n        \"~internal\": {\n          type: \"ParamDef\",\n          array,\n          kind,\n          optional,\n          valueSerializer: number,\n          trailing,\n          default: undefined as never,\n        },\n      }),\n\n      boolean: getParamDef({\n        \"~internal\": {\n          type: \"ParamDef\",\n          array,\n          kind,\n          optional,\n          valueSerializer: boolean,\n          trailing,\n          default: undefined as never,\n        },\n      }),\n\n      ofType<TValue = unknown>(\n        valueSerializer: ValueSerializer<TValue> = json<TValue>()\n      ) {\n        if (__DEV__) {\n          assert(\"[ParamDef].ofType\", [\n            assert.numArgs([].slice.call(arguments), 0, 1),\n            assert.type(\"object\", \"valueSerializer\", valueSerializer),\n          ]);\n        }\n\n        return getParamDef({\n          \"~internal\": {\n            type: \"ParamDef\",\n            array,\n            kind,\n            optional,\n            valueSerializer,\n            trailing,\n            default: undefined as never,\n          },\n        });\n      },\n    };\n  }\n\n  type GetParamDefResult<T extends ParamDef<TKind>> =\n    T[\"~internal\"][\"optional\"] extends true\n      ? {\n          [\"~internal\"]: T[\"~internal\"];\n          default(value: ParamValue<T>): {\n            [\"~internal\"]: {\n              type: \"ParamDef\";\n              kind: T[\"~internal\"][\"kind\"];\n              array: T[\"~internal\"][\"array\"];\n              valueSerializer: T[\"~internal\"][\"valueSerializer\"];\n              optional: T[\"~internal\"][\"optional\"];\n              default: ParamValue<T>;\n              trailing: T[\"~internal\"][\"trailing\"];\n            };\n          };\n        }\n      : T;\n\n  function getParamDef<T extends ParamDef<TKind>>({\n    \"~internal\": internal,\n  }: T): GetParamDefResult<T> {\n    if (!internal.optional) {\n      return { \"~internal\": internal } as any;\n    }\n\n    return {\n      \"~internal\": internal,\n      default(value: any) {\n        if (__DEV__) {\n          assert(\"[ParamDef].default\", [\n            assert.numArgs([].slice.call(arguments), 1),\n          ]);\n        }\n\n        return {\n          \"~internal\": { ...internal, default: value },\n        };\n      },\n    } as any;\n  }\n}\n","import { RouteGroup, UmbrellaRoute, UmbrellaRouteBuilder } from \"./types\";\nimport { assert } from \"./assert\";\n\nexport function createGroup<T extends any[]>(groupItems: T): RouteGroup<T> {\n  if (__DEV__) {\n    assert(\"createGroup\", [\n      assert.numArgs([].slice.call(arguments), 1),\n      assert.arrayOfType(\n        [\"RouteGroup\", \"RouteBuilder\"],\n        \"groupItems\",\n        groupItems\n      ),\n    ]);\n  }\n\n  const routeNames: Record<string, true> = {};\n\n  groupItems.forEach((item) => {\n    if (isRouteGroup(item)) {\n      item.routeNames.forEach((name) => {\n        routeNames[name] = true;\n      });\n    } else {\n      routeNames[item.name] = true;\n    }\n  });\n\n  return {\n    \"~internal\": {\n      type: \"RouteGroup\",\n      Route: null as any,\n    },\n    routeNames: Object.keys(routeNames),\n    has(route: UmbrellaRoute): route is UmbrellaRoute {\n      if (__DEV__) {\n        assert(\"[RouteGroup].has\", [\n          assert.numArgs([].slice.call(arguments), 1),\n          assert.type(\"object\", \"route\", route),\n        ]);\n      }\n\n      if (route.name === false) {\n        return false;\n      }\n\n      return !!routeNames[route.name];\n    },\n  };\n}\n\nfunction isRouteGroup(\n  value: RouteGroup | UmbrellaRouteBuilder\n): value is RouteGroup {\n  return !!(value as RouteGroup).routeNames;\n}\n","import {\n  CoreRouter,\n  UmbrellaRouteDefCollection,\n  UmbrellaRoute,\n  RouteDefCollectionRoute,\n  RouterOpts,\n} from \"./types\";\nimport { createRouter as coreCreateRouter, parseArgs } from \"./createRouter\";\nimport { TypeRouteError } from \"./TypeRouteError\";\nimport * as React from \"react\";\nimport { attemptScrollToTop } from \"./attemptScrollToTop\";\n\nif (typeof __DEV__ === \"boolean\" && __DEV__) {\n  const [major, minor] = React.version\n    .split(\".\")\n    .map((value: string) => parseInt(value, 10));\n\n  if (major < 16 || (major === 16 && minor < 8)) {\n    throw TypeRouteError.Invalid_React_version.create(React.version);\n  }\n}\n\nexport { defineRoute } from \"./defineRoute\";\nexport { param } from \"./param\";\nexport { createGroup } from \"./createGroup\";\nexport { noMatch } from \"./noMatch\";\nexport { preventDefaultLinkClickBehavior } from \"./preventDefaultLinkClickBehavior\";\nexport {\n  GetRoute as Route,\n  Link,\n  ValueSerializer,\n  QueryStringSerializer,\n  SessionOpts,\n  RouterOpts,\n} from \"./types\";\n\ntype Router<TRouteDefCollection extends { [routeName: string]: any }> =\n  CoreRouter<TRouteDefCollection> & {\n    /**\n     * React hook for retrieving the current route.\n     *\n     * @see https://type-route.zilch.dev/api-reference/router/use-route\n     */\n    useRoute: () => RouteDefCollectionRoute<TRouteDefCollection>;\n\n    /**\n     * React component which connects React to Type Route and provides the current route to the rest of the application.\n     *\n     * @see https://type-route.zilch.dev/api-reference/router/route-provider\n     */\n    RouteProvider: (props: { children?: any }) => any;\n  };\ntype UmbrellaRouter = Router<UmbrellaRouteDefCollection>;\n\nexport function createRouter<\n  TRouteDefCollection extends { [routeName: string]: any }\n>(routeDefs: TRouteDefCollection): Router<TRouteDefCollection>;\nexport function createRouter<\n  TRouteDefCollection extends { [routeName: string]: any }\n>(\n  opts: RouterOpts,\n  routeDefs: TRouteDefCollection\n): Router<TRouteDefCollection>;\nexport function createRouter(...args: any[]): UmbrellaRouter {\n  const { opts, routeDefs } = parseArgs(args);\n  const router = coreCreateRouter({ ...opts, scrollToTop: false }, routeDefs);\n  const routeContext = React.createContext<UmbrellaRoute | null>(null);\n\n  return {\n    ...router,\n    RouteProvider,\n    useRoute,\n  };\n\n  function RouteProvider(props: { children?: any }) {\n    const [route, setRoute] = React.useState(router.session.getInitialRoute());\n\n    React.useLayoutEffect(() => router.session.listen(setRoute), []);\n\n    React.useEffect(() => {\n      attemptScrollToTop(route, opts.scrollToTop);\n    }, [route]);\n\n    return React.createElement(\n      routeContext.Provider,\n      { value: route },\n      props.children\n    );\n  }\n\n  function useRoute() {\n    const route = React.useContext(routeContext);\n\n    if (__DEV__) {\n      if (route === null) {\n        throw TypeRouteError.App_should_be_wrapped_in_a_RouteProvider_component.create();\n      }\n    }\n\n    return route!;\n  }\n}\n"],"names":["typeOf","value","Array","isArray","getBuildPathDefRouteNameMessage","routeName","getBuildPathDefErrorMessage","context","rawPath","TypeRouteError","buildErrorCollection","Path_may_not_be_an_empty_string","errorCode","getDetails","Path_must_start_with_a_forward_slash","Path_may_not_end_with_a_forward_slash","Path_may_not_include_characters_that_must_be_URL_encoded","segment","leading","trailing","_segment$trailing","paramId","_segment$paramId","invalidCharacters","split","filter","character","encodeURIComponent","concat","join","Path_may_not_include_empty_segments","Path_may_have_at_most_one_parameter_per_segment","parameterNames","Path_parameters_may_not_be_used_more_than_once_when_building_a_path","parameterName","Optional_path_parameters_may_not_have_any_text_around_the_parameter","leadingText","trailingText","messages","push","Path_may_have_at_most_one_optional_or_trailing_parameter","numOptionalTrailingParameterNames","Optional_or_trailing_path_parameters_may_only_appear_in_the_last_path_segment","All_path_parameters_must_be_used_in_path_construction","unusedParameters","Path_parameter_name_must_not_include_curly_brackets_dollar_signs_or_the_forward_slash_character","paramName","Extension_route_definition_parameter_names_may_not_be_the_same_as_base_route_definition_parameter_names","duplicateParameterNames","Expected_type_does_not_match_actual_type","_ref","valueName","expectedType","actualType","JSON","stringify","map","line","Expected_number_of_arguments_does_match_actual_number","_ref2","args","min","max","length","Query_string_array_format_and_custom_query_string_serializer_may_not_both_be_provided","Expected_length_of_array_does_match_actual_length","_ref3","array","Encountered_unexpected_parameter_when_building_route","_ref4","unexpectedParameterName","allowedParameterNames","name","Missing_required_parameter_when_building_route","_ref5","missingParameterName","Base_url_must_start_with_a_forward_slash","baseUrl","Base_url_must_not_contain_any_characters_that_must_be_url_encoded","replace","App_should_be_wrapped_in_a_RouteProvider_component","Invalid_React_version","version","definitions","errors","Object","keys","forEach","key","_definitions$key","messageTitle","create","_len","_key","arguments","message","_getDetails","apply","detail","error","Error","asArray","assert","assertions","arrayLength","numArgs","collectionOfType","valuePropertyNames","_i","_valuePropertyNames","propertyName","type","arrayOfType","index","expectedTypeList","_iterator","_createForOfIteratorHelperLoose","_step","done","expectsProperType","toUpperCase","buildPathDefs","pathParamDefCollection","getRawPath","namedPathParamDefs","namedPathParameterDefinition","_extends","paramIdCollection","indexOf","getParamId","Infinity","errorContext","rawPathSegments","slice","usedPathParams","pathDef","rawSegment","includedParamDef","_iterator2","_step2","paramDef","_rawSegment$split","optional","namedParamDef","numOptionalOrTrailingParams","part","_part$namedParamDef","_part$namedParamDef2","lastPathSegmentParameterDefinition","unusedPathParameterDefinitions","getParamDefsOfType","paramDefCollection","filteredParamDefCollection","kind","createLocation","paramCollection","arraySeparator","queryStringSerializer","pathDefs","params","path","query","state","_loop","_paramDef$Internal$v","paramValue","undefined","urlEncodeDefault","urlEncode","valueSerializer","getValue","valueSerializerId","id","_ret","rawParam","hasQueryParams","reduce","_extends2","fullPath","result","noMatch","__noMatch","stringUtils","startsWith","endsWith","splitFirst","start","i","end","_value$split","first","rest","getPathMatch","match","primaryPath","numExtraneousParams","pathHasTrailingSlash","pathSegmentList","segmentIndex","_pathSegmentDef$named2","_pathSegmentDef$named3","pathSegmentDef","pathSegment","v","numRemainingPathSegmentDefs","_pathSegmentDef$named","pathSegmentMinusLeading","pathSegmentMinusLeadingAndTrailing","_pathSegmentDef$named4","parse","decodeURIComponent","some","Math","getObjectMatch","object","paramDefs","namedParamDefs","extraneousParams","raw","_paramDef$Internal$v2","getStateMatch","getQueryMatch","createMatcher","queryParamDefCollection","stateParamDefCollection","defaultParams","param","routerLocation","pathMatch","queryMatch","stateMatch","preventDefaultLinkClickBehavior","event","e","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","isSelfTarget","target","defaultPrevented","button","preventDefault","buildRoute","location","routerContext","navigate","history","href","createHref","pathname","search","route","link","onClick","action","options","createRouteBuilder","routeDef","getRouterContext","build","call","paramKey","paramsWithDefault","defineProperty","Route","createQueryStringSerializer","queryStringArrayFormat","_args$queryStringArra","_args$arraySeparator","multiKey","arrayKeySuffix","queryParams","_part$split","rawParamName","rawParamValue","encodedName","valueParts","getMatchingRoute","getRoutes","routes","nonExactMatch","convertToRouterLocationFromHistoryLocation","rawLocation","getRouteByHref","_splitFirst","createNavigationHandlerManager","startListening","stopListening","handlerIdList","idCounter","add","getHandlers","handler","remove","splice","attemptScrollToTop","scrollToTop","window","scroll","navigator","userAgent","_unused","serializeStateParams","routeDefs","sortedParams","sort","createRouter","_parseArgs","parseArgs","opts","navigationHandlerManager","unlisten","listen","update","skipNextEnvironmentTriggeredNavigation","toLowerCase","_getMatchingRoute","handleNavigation","_opts$baseUrl","_opts$arrayFormat$sep","_opts$arrayFormat","arrayFormat","separator","_opts$queryStringSeri","_opts$arrayFormat2","queryString","skipHandlingNextApplicationTriggeredNavigation","initialRoute","previousRoute","blockerCollection","applySessionOpts","session","createRouteBuilderCollection","router","_getRouteByHref","_getRouteByHref2","back","amount","go","forward","getInitialRoute","reset","block","blocker","unblock","_getMatchingRoute2","retry","findIndex","item","sessionOpts","document","createMemoryHistory","initialEntries","initialIndex","createHashHistory","createBrowserHistory","_previousRoute","skipRender","hash","_opts$arrayFormat3","_getRouterContext","defineRoute","assertDefineRouteOrExtendArgs","parent","extend","_len2","_key2","parentParamNames","extensionParamNames","duplicateParamNames","x","parentPathArray","childPathArray","parentPath","childPath","allowedKeys","filteredX","functionName","boolean","number","isNumeric","parseFloat","toString","isNaN","test","string","json","getParamDefKindSection","getParamDefOptionalitySection","getParamDef","ofType","internal","_default","createGroup","groupItems","routeNames","isRouteGroup","has","_React$version$split$","React","parseInt","major","minor","coreCreateRouter","routeContext","RouteProvider","useRoute","props","_React$useState","setRoute","Provider","children"],"mappings":"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"}